?mclapply
MBB.result = MBB(weighted.data, B = 2000, b = 200, n = 30)
MBB.result = MBB(weighted.data[[1]], B = 2000, b = 200, n = 30)
head(weighted.data[[1]])
risk.list = mclapply(weighted.data, function(x){x[,c(1,2,8)]}, mc.cores = 6L)
risk.list[[1]]
## bootstrap start, assume that MBB is applied
risk.ratio = function(risk.data = risk.data, landmark = sort(unique(risk.data$tmean))){
ERC = NULL;
reference = which(landmark == 20)
for (lag in 0:21){
ERClag = NULL;
subset = 1:(nrow(risk.data)-lag) #1:N-l
df = risk.data[subset,]
df$all = risk.data$all[(subset+lag)] #lagged outcome
df = na.omit(df)
for (w in landmark){
index = which(df$tmean == w)
ERClag = c(ERClag, sum(df$all[index] * df$weight[index]) / sum(df$weight[index]))
}
ERC = cbind(ERC, ERClag)
}
return(cbind(landmark,ERC) )
}
ERC = lapply(risk.list, risk.ratio)
ERC = mclapply(risk.list, risk.ratio, mc.cores = 6L)
ERC[[1]]
log.transf <- function(RR = ERC[[1]]){
reference = which(RR[,1] == 20)
logRR = apply(log(RR[,-1]),2,function(x){x-x[reference]})
logRR = cbind(RR[,1], logRR, rowSums(logRR, na.rm = T))
return(logRR)
}
lERC = lapply(ERC, log.transf)
MBB.result = mclapply(risk.list, MBB, B = 2000, b = 200, n = 30, mc.cores = 6L)
MBB.result = MBB(risk.list[[1]])
MBB.result
MBB.result[,,2]
lERC[[1]]
lERC[[1]][,1]
#pooling
pooling <- function(effect.list, variance.list){
stack1 = NULL; stack2 = NULL
for (i in 1:50){
stack1 = rbind(stack1, effect.list[[i]]); stack2 = rbind(stack2, variance.list[[i]])
}
landmark = sort(unique(stack1[,1]))
aggregated = NULL; variance = NULL;
for (w in landmark){
index = which(stack1[,1] == w); effect = stack1[index,]; precision = stack2[index,]
aggregated = rbind(aggregated, sapply(2:24, function(x){weighted.means(effect[,x], precision[,x], na.rm = T)}) )
variance = rbind(variance, 1/colSums(precision, na.rm = T))
}
return(list(landmark, aggregated, variance))
}
MBB.result = mclapply(risk.list, MBB, B = 2000, b = 200, n = 30, mc.cores = 6L)
MBB.var = mclapply(MBB.result, apply, c(1,2), var, na.rm = T, mc.cores = 6L)
MBB.var
#pooling
pooling <- function(effect.list, variance.list){
stack1 = NULL; stack2 = NULL
for (i in 1:50){
stack1 = rbind(stack1, effect.list[[i]]); stack2 = rbind(stack2, variance.list[[i]])
}
landmark = sort(unique(stack1[,1]))
aggregated = NULL; variance = NULL;
for (w in landmark){
index = which(stack1[,1] == w); effect = stack1[index,]; precision = stack2[index,]
aggregated = rbind(aggregated, sapply(2:24, function(x){weighted.means(effect[,x], precision[,x], na.rm = T)}) )
variance = rbind(variance, 1/colSums(precision, na.rm = T))
}
return(list(landmark, aggregated, variance))
}
pooled = pooling(lERC, MBB.var)
#pooling
pooling <- function(effect.list, variance.list){
stack1 = NULL; stack2 = NULL
for (i in 1:50){
stack1 = rbind(stack1, effect.list[[i]]); stack2 = rbind(stack2, variance.list[[i]])
}
landmark = sort(unique(stack1[,1]))
aggregated = NULL; variance = NULL;
for (w in landmark){
index = which(stack1[,1] == w); effect = stack1[index,]; precision = stack2[index,]
aggregated = rbind(aggregated, sapply(2:24, function(x){weighted.mean(effect[,x], precision[,x], na.rm = T)}) )
variance = rbind(variance, 1/colSums(precision, na.rm = T))
}
return(list(landmark, aggregated, variance))
}
pooled = pooling(lERC, MBB.var)
K = 1e+03; G = 6.673e-11; M = 5.98e+24; R = 6.37e+06; g = 50;
time = seq(0, 5, 0.01)
#initial x3: 1000
x1 = x2 = 0; x3 = 1000
uconstant = (G*M)/(K*R^2)
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + 10 * cos(t)
x3 = c(x3, -u*0.05 )
dx2 = (K*u - g*x2[i-1])/x3[i-1] - G*M/(R+x[i-1])^2
x2 = c(x2, dx2*0.05 )
x1 = c(x1, x2[i-1]*0.05)
}
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + 10 * cos(t)
x3 = c(x3, -u*0.05 )
dx2 = (K*u - g*x2[i-1])/x3[i-1] - G*M/(R+x1[i-1])^2
x2 = c(x2, dx2*0.05 )
x1 = c(x1, x2[i-1]*0.05)
}
plot(time, x1)
x1
#initial x3: 1000
x1 = x2 = 0; x3 = 100000
uconstant = (G*M)/(K*R^2)
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + 10 * cos(t)
x3 = c(x3, -u*0.05 )
dx2 = (K*u - g*x2[i-1])/x3[i-1] - G*M/(R+x1[i-1])^2
x2 = c(x2, dx2*0.05 )
x1 = c(x1, x2[i-1]*0.05)
}
plot(time, x1)
x1
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + 10 * cos(t)
x3 = c(x3, -u*0.01 )
dx2 = (K*u - g*x2[i-1])/x3[i-1] - G*M/(R+x1[i-1])^2
x2 = c(x2, dx2*0.01 )
x1 = c(x1, x2[i-1]*0.01)
}
plot(time, x1)
x
x1
#initial x3: 1000
x1 = x2 = 0; x3 = 100000
uconstant = (G*M)/(K*R^2)
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + 10 * cos(t)
x3 = c(x3, -u*0.01 )
dx2 = (K*u - g*x2[i-1])/x3[i-1] - G*M/(R+x1[i-1])^2
x2 = c(x2, dx2*0.01 )
x1 = c(x1, x2[i-1]*0.01)
}
plot(time, x1)
x1
time = seq(0, 5, 0.1)
#initial x3: 1000
x1 = x2 = 0; x3 = 100000
uconstant = (G*M)/(K*R^2)
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + 10 * cos(t)
x3 = c(x3, -u*0.1 )
dx2 = (K*u - g*x2[i-1])/x3[i-1] - G*M/(R+x1[i-1])^2
x2 = c(x2, dx2*0.1 )
x1 = c(x1, x2[i-1]*0.1)
}
plot(time, x1)
x1
time = seq(0, 5, 0.01)
#initial x3: 1000
x1 = x2 = 0; x3 = 100000
uconstant = (G*M)/(K*R^2)
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + 10 * cos(t)
x3 = c(x3, -u*0.01 )
dx2 = (K*u - g*x2[i-1])/x3[i-1] - G*M/(R+x1[i-1])^2
x2 = c(x2, dx2*0.01 )
x1 = c(x1, x2[i-1]*0.01)
}
plot(time, x1)
x1
x3
x2
t
time = seq(0, 5, 0.01)
#initial x3: 1000
x1 = x2 = 0; x3 = 100000
uconstant = (G*M)/(K*R^2)
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + 10 * cos(t)
x3 = c(x3, x3[i-1]-u*0.01 )
dx2 = (K*u - g*x2[i-1])/x3[i-1] - G*M/(R+x1[i-1])^2
x2 = c(x2, x2[i-1]+dx2*0.01 )
x1 = c(x1, x1[i-1]+x2[i-1]*0.01)
}
plot(time, x1)
x1 = x2 = 0; x3 = 100000
x1 = x2 = 0; x3 = 100000
u0 = uconstant * x3; x30 = x3;
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + 10 * cos(t)
dx3 = -(u - u0)
dx2 = (2*G*M)/(R^3)x1[i-1] - (g/x30)*x2[i-1] - G*M/(x30*R)(x3[i-1]-x30)
x1 = x2 = 0; x3 = 100000
u0 = uconstant * x3; x30 = x3;
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + 10 * cos(t)
dx3 = -(u - u0)
dx2 = (2*G*M)/(R^3)*x1[i-1] - (g/x30)*x2[i-1] - G*M/(x30*R)*(x3[i-1]-x30)+K/x30*(u-u0)
dx1 = x2[i-1]
x3 = c(x3, x3[i-1]+0.01*dx3)
x2 = c(x2, x2[i-1]+0.01*dx2)
x1 = c(x2, x1[i-1]+0.01*dx1)
}
plot(time, x1)
length(time)
length(x1)
x1 = x2 = 0; x3 = 100000
u0 = uconstant * x3; x30 = x3;
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + 10 * cos(t)
dx3 = -(u - u0)
dx2 = (2*G*M)/(R^3)*x1[i-1] - (g/x30)*x2[i-1] - G*M/(x30*R)*(x3[i-1]-x30)+K/x30*(u-u0)
dx1 = x2[i-1]
x3 = c(x3, x3[i-1]+0.01*dx3)
x2 = c(x2, x2[i-1]+0.01*dx2)
x1 = c(x2, x1[i-1]+0.01*dx1)
}
plot(time, x1)
length(x1)
x1
x1 = x2 = 0; x3 = 100000
u0 = uconstant * x3; x30 = x3;
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + 10 * cos(t)
dx3 = -(u - u0)
dx2 = (2*G*M)/(R^3)*x1[i-1] - (g/x30)*x2[i-1] - G*M/(x30*R)*(x3[i-1]-x30)+K/x30*(u-u0)
dx1 = x2[i-1]
x3 = c(x3, x3[i-1]+0.01*dx3)
x2 = c(x2, x2[i-1]+0.01*dx2)
x1 = c(x1, x1[i-1]+0.01*dx1)
}
plot(time, x1)
plot(time, x1)
par(mfrow = c(1,2))
plot(time, x1)
plot(time, nonlinear(0,0,100000))
nonlinear <- function(x1,x2,x3){
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + 10 * cos(t)
x3 = c(x3, x3[i-1]-u*0.01 )
dx2 = (K*u - g*x2[i-1])/x3[i-1] - G*M/(R+x1[i-1])^2
x2 = c(x2, x2[i-1]+dx2*0.01 )
x1 = c(x1, x1[i-1]+x2[i-1]*0.01)
}
return(x1)
}
x1 = x2 = 0; x3 = 100000
u0 = uconstant * x3; x30 = x3;
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + 10 * cos(t)
dx3 = -(u - u0)
dx2 = (2*G*M)/(R^3)*x1[i-1] - (g/x30)*x2[i-1] - G*M/(x30*R)*(x3[i-1]-x30)+K/x30*(u-u0)
dx1 = x2[i-1]
x3 = c(x3, x3[i-1]+0.01*dx3)
x2 = c(x2, x2[i-1]+0.01*dx2)
x1 = c(x1, x1[i-1]+0.01*dx1)
}
par(mfrow = c(1,2))
plot(time, x1)
plot(time, nonlinear(0,0,100000))
plot(time, x1)
lines(time, nonlinar(0,0,1e+05), col = "red")
plot(time, x1)
lines(time, nonlinear(0,0,1e+05), col = "red")
plot(time, nonlinear(0,0,1e+05))
lines(time, x1, col = 'red')
linear <- function(x1, x2, x3, du = 10){
u0 = uconstant * x3; x30 = x3;
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + du * cos(t)
dx3 = -(u - u0)
dx2 = (2*G*M)/(R^3)*x1[i-1] - (g/x30)*x2[i-1] - G*M/(x30*R)*(x3[i-1]-x30)+K/x30*(u-u0)
dx1 = x2[i-1]
x3 = c(x3, x3[i-1]+0.01*dx3)
x2 = c(x2, x2[i-1]+0.01*dx2)
x1 = c(x1, x1[i-1]+0.01*dx1)
}
return(x1)
}
nonlinear <- function(x1,x2,x3, du = 10){
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[i-1] + du * cos(t)
x3 = c(x3, x3[i-1]-u*0.01 )
dx2 = (K*u - g*x2[i-1])/x3[i-1] - G*M/(R+x1[i-1])^2
x2 = c(x2, x2[i-1]+dx2*0.01 )
x1 = c(x1, x1[i-1]+x2[i-1]*0.01)
}
return(x1)
}
plot(time, nonlinear(0,0,1e+05, 10))
lines(time, linear(0,0,1e+05, 10
plot(time, nonlinear(0,0,1e+05, 10))
plot(time, nonlinear(0,0,1e+05, 10))
lines(time, linear(0,0,1e+05, 10), col = 'red')
plot(time, nonlinear(0,0,1e+05, 10))
lines(time, linear(0,0,1e+05, 10), col = 'red')
nonlinear <- function(x1,x2,x3, du = 10){
u0 = uconstant * x3; x30 = x3;
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[1] + du * cos(t)
x3 = c(x3, x3[i-1]-u*0.01 )
dx2 = (K*u - g*x2[i-1])/x3[i-1] - G*M/(R+x1[i-1])^2
x2 = c(x2, x2[i-1]+dx2*0.01 )
x1 = c(x1, x1[i-1]+x2[i-1]*0.01)
}
return(x1)
}
linear <- function(x1, x2, x3, du = 10){
u0 = uconstant * x3; x30 = x3;
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[1] + du * cos(t)
dx3 = -(u - u0)
dx2 = (2*G*M)/(R^3)*x1[i-1] - (g/x30)*x2[i-1] - G*M/(x30*R)*(x3[i-1]-x30)+K/x30*(u-u0)
dx1 = x2[i-1]
x3 = c(x3, x3[i-1]+0.01*dx3)
x2 = c(x2, x2[i-1]+0.01*dx2)
x1 = c(x1, x1[i-1]+0.01*dx1)
}
return(x1)
}
plot(time, nonlinear(0,0,1e+05, 10))
lines(time, linear(0,0,1e+05, 10), col = 'red')
plot(time, nonlinear(0,0,1e+03, 10))
lines(time, linear(0,0,1e+03, 10), col = 'red')
plot(time, nonlinear(0,0,1e+05, 10))
lines(time, linear(0,0,1e+05, 10), col = 'red')
plot(time, nonlinear(0,0,1e+05, 100))
lines(time, linear(0,0,1e+05, 100), col = 'red')
plot(time, nonlinear(0,0,1e+05, 10))
lines(time, linear(0,0,1e+05, 10), col = 'red')
linear <- function(x1, x2, x3, du = 10){
u0 = uconstant * x3; x30 = x3;
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[1] + du * cos(t)
dx3 = -u
dx2 = (2*G*M)/(R^3)*x1[i-1] - (g/x30)*x2[i-1] - G*M/(x30*R)*(x3[i-1]-x30)+K/x30*(u-u0)
dx1 = x2[i-1]
x3 = c(x3, x3[i-1]+0.01*dx3)
x2 = c(x2, x2[i-1]+0.01*dx2)
x1 = c(x1, x1[i-1]+0.01*dx1)
}
return(x1)
}
plot(time, nonlinear(0,0,1e+05, 10))
lines(time, linear(0,0,1e+05, 10), col = 'red')
linear <- function(x1, x2, x3, du = 10){
u0 = uconstant * x3; x30 = x3;
for (i in 2:length(time)){
t = time[i]
u = uconstant * x3[1] + du * cos(t)
dx3 = -(u-u0)
dx2 = (2*G*M)/(R^3)*x1[i-1] - (g/x30)*x2[i-1] - G*M/(x30*R)*(x3[i-1]-x30)+K/x30*(u-u0)
dx1 = x2[i-1]
x3 = c(x3, x3[i-1]+0.01*dx3)
x2 = c(x2, x2[i-1]+0.01*dx2)
x1 = c(x1, x1[i-1]+0.01*dx1)
}
return(x1)
}
plot(time, nonlinear(0,0,1e+05, 10))
lines(time, linear(0,0,1e+05, 10), col = 'red')
pooled = pooling(lERC, MBB.var)
MBB.var
MBB.var[[1]]
length(MBB.var)
length(MBB.result)
length(lERC)
lERC[[1]]
lERC[1]
MBB.var[[1]]
lERC[[1]]
lERC[[1]][,1]
stack1 = NULL; stack2 = NULL
pooling <- function(effect.list, variance.list){
stack1 = NULL; stack2 = NULL
for (i in 1:50){
stack1 = rbind(stack1, effect.list[[i]]); stack2 = rbind(stack2, variance.list[[i]])
}
landmark = sort(unique(stack1[,1]))
aggregated = NULL; variance = NULL;
for (w in landmark){
index = which(stack1[,1] == w); effect = stack1[index,]; precision = 1/stack2[index,]
aggregated = rbind(aggregated, sapply(2:24, function(x){weighted.mean(effect[,x], precision[,x], na.rm = T)}) )
variance = rbind(variance, 1/colSums(precision, na.rm = T))
}
return(list(landmark, aggregated, variance))
}
pooled = pooling(lERC, MBB.var)
pooling <- function(effect.list, variance.list){
stack1 = NULL; stack2 = NULL
for (i in 1:50){
stack1 = rbind(stack1, effect.list[[i]]); stack2 = rbind(stack2, variance.list[[i]])
}
landmark = sort(unique(stack1[,1]))
aggregated = NULL; variance = NULL;
for (w in landmark){
index = which(stack1[,1] == w); effect = df(stack1[index,]); precision = df(1/stack2[index,])
aggregated = rbind(aggregated, sapply(2:24, function(x){weighted.mean(effect[,x], precision[,x], na.rm = T)}) )
variance = rbind(variance, 1/colSums(precision, na.rm = T))
}
return(list(landmark, aggregated, variance))
}
pooled = pooling(lERC, MBB.var)
?df
pooling <- function(effect.list, variance.list){
stack1 = NULL; stack2 = NULL
for (i in 1:50){
stack1 = rbind(stack1, effect.list[[i]]); stack2 = rbind(stack2, variance.list[[i]])
}
landmark = sort(unique(stack1[,1]))
aggregated = NULL; variance = NULL;
for (w in landmark){
index = which(stack1[,1] == w); effect = data.frame(stack1[index,]); precision = data.frame(1/stack2[index,])
aggregated = rbind(aggregated, sapply(2:24, function(x){weighted.mean(effect[,x], precision[,x], na.rm = T)}) )
variance = rbind(variance, 1/colSums(precision, na.rm = T))
}
return(list(landmark, aggregated, variance))
}
pooled = pooling(lERC, MBB.var)
c(1,2)[1,]
c(1,2)[,1]
c(1,2,3)[,1]
c(1,2,3)[,2]
c(1,2,3)[1,]
data.frame(c(1,2,3))
#pooling
pooling <- function(effect.list, variance.list){
stack1 = NULL; stack2 = NULL
for (i in 1:50){
stack1 = rbind(stack1, effect.list[[i]]); stack2 = rbind(stack2, variance.list[[i]])
}
landmark = sort(unique(stack1[,1]))
aggregated = NULL; variance = NULL;
for (w in landmark){
index = which(stack1[,1] == w);
if (length(index) > 1) {
effect = stack1[index,]; precision = 1/stack2[index,]
aggregated = rbind(aggregated, sapply(2:24, function(x){weighted.mean(effect[,x], precision[,x], na.rm = T)}) )
variance = rbind(variance, 1/colSums(precision, na.rm = T))
}
else { aggregated = rbind(aggregated, effect); variance = rbind(variance, 1/precision)}
}
return(list(landmark, aggregated, variance))
}
pooled = pooling(lERC, MBB.var)
#pooling
pooling <- function(effect.list, variance.list){
stack1 = NULL; stack2 = NULL
for (i in 1:50){
stack1 = rbind(stack1, effect.list[[i]]); stack2 = rbind(stack2, variance.list[[i]])
}
landmark = sort(unique(stack1[,1]))
aggregated = NULL; variance = NULL;
for (w in landmark){
index = which(stack1[,1] == w); effect = stack1[index,]; precision = 1/stack2[index,]
if (length(index) > 1) {
aggregated = rbind(aggregated, sapply(2:24, function(x){weighted.mean(effect[,x], precision[,x], na.rm = T)}) )
variance = rbind(variance, 1/colSums(precision, na.rm = T))
}
else { aggregated = rbind(aggregated, effect); variance = rbind(variance, 1/precision)}
}
return(list(landmark, aggregated, variance))
}
pooled = pooling(lERC, MBB.var)
pooled
plot(pooled[[1]], pooled[[2]][,24])
pooled[[2]]
dim(pooled[[2]])
length(pooled[[1]])
#pooling
pooling <- function(effect.list, variance.list){
stack1 = NULL; stack2 = NULL
for (i in 1:50){
stack1 = rbind(stack1, effect.list[[i]]); stack2 = rbind(stack2, variance.list[[i]])
}
landmark = sort(unique(stack1[,1]))
aggregated = NULL; variance = NULL;
for (w in landmark){
index = which(stack1[,1] == w); effect = stack1[index,]; precision = 1/stack2[index,]
if (length(index) > 1) {
aggregated = rbind(aggregated, sapply(2:24, function(x){weighted.mean(effect[,x], precision[,x], na.rm = T)}) )
variance = rbind(variance, 1/colSums(precision, na.rm = T))
}
else { aggregated = rbind(aggregated, effect[-1]); variance = rbind(variance, 1/precision[-1])}
}
return(list(landmark, aggregated, variance))
}
pooled = pooling(lERC, MBB.var)
pooled[[2]]
pooled[[2]][,23]
lERC[[1]]
lERC[[2]]
